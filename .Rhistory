clusterExport(cl, c("theta", "sigmoid","gradient"))
iter <- 0
cost_vector = c()
while(iter < max_iter){
iter <- iter + 1
# Appel de clusterApply pour paralleliser le calcule des gradients
res <- clusterApply(cl, x=1:ncores, task)
# Aggrégation des gradient
gradient_glob = apply(sapply(res, function(x) x),1,sum)
print("gradient aggreger")
# Mise à jour du theta par le master
new_theta <- theta - (leaning_rate*gradient_glob)
# Controle de convergence
print("convergence controle")
if (sum(abs(theta-new_theta)) < tolerance){
break
}
theta = new_theta
# Calcul du cout
print("cout")
cost = logLoss(theta, as.matrix(X), y)
# Historisation de la fonction de cout
print("historise")
cost_vector = c(cost_vector, cost)
# Envoit du nouveau theta au master
clusterExport(cl, "theta")
}
stopCluster(cl)
return(list(theta_final = theta, history_cost = cost_vector, nbIter=iter))
}
print(system.time(model_batch_seq <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
usethis::use_package("utils")
library(dgrGlm)
X1
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(as.data.frame(X1), y, theta, ncores, leaning_rate, max_iter,tolerance)))
library(dgrGlm)
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(as.data.frame(X1), y, theta, ncores, leaning_rate, max_iter,tolerance)))
# GENERATION DONNÉES LOGISTIQUE
set.seed(100)
n <-100
p <- 10
theta = runif(p+1) # or theta = runif(7)
X <- cbind(1,matrix(rnorm(n*p),n,p)) #  6 Variables quantitative
X1 = matrix(rnorm(n*p),n,p)
class(X1)
class(theta)
Z <- X %*% theta # combinaison lineare de variable
fprob <- ifelse(Z<0, exp(Z)/(1+exp(Z)),1/(1+exp(-Z))) # Calcul des probas d'affectation
y<- rbinom(n,1,fprob)
data = as.data.frame(cbind(y,X1))
leaning_rate = 0.1
max_iter = 1000
tolerance = 1e-04
batch_size = 10
batch_size_online = 1
random_state = 102
ncores = 3
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(as.data.frame(X1), y, theta, ncores, leaning_rate, max_iter,tolerance)))
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(as.data.frame(X1), y, theta, ncores, leaning_rate, max_iter,tolerance)))
View(X1)
X1 <- as.data.frame(X1)
X1$biais <- 1
# Gradient sequentiel
print(system.time(model_batch_seq <- dg_batch_seq(X1,y,theta,leaning_rate, max_iter,tolerance)))
library(dgrGlm)
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_seq <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size)))
print(system.time(model_mini_online_batch_seq <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size,leaning_rate, max_iter,tolerance)))
leaning_rate = 0.1
max_iter = 1000
tolerance = 1e-04
batch_size = 10
batch_size_online = 1
random_state = 102
ncores = 3
print(system.time(model_mini_online_batch_seq <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size,leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X,y,theta,batch_size,leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X,y,theta,batch_size,leaning_rate, max_iter,tolerance)))
leaning_rate = 0.1
max_iter = 1000
tolerance = 1e-04
batch_size = 10
batch_size_online = 1
random_state = 102
ncores = 3
print(system.time(model_mini_online_batch_seq <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size,leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_seq <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size,leaning_rate, max_iter,tolerance)))
set.seed(100)
n <-100
p <- 10
theta = runif(p+1) # or theta = runif(7)
X <- cbind(1,matrix(rnorm(n*p),n,p)) #  6 Variables quantitative
X1 = matrix(rnorm(n*p),n,p)
X1 <- as.data.frame(X1)
X1$biais <- 1
class(X1)
class(theta)
Z <- X %*% theta # combinaison lineare de variable
fprob <- ifelse(Z<0, exp(Z)/(1+exp(Z)),1/(1+exp(-Z))) # Calcul des probas d'affectation
y<- rbinom(n,1,fprob)
data = as.data.frame(cbind(y,X1))
leaning_rate = 0.1
max_iter = 1000
tolerance = 1e-04
batch_size = 10
batch_size_online = 1
random_state = 102
ncores = 3
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
library(dgrGlm)
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_seq <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size,leaning_rate, max_iter,tolerance)))
batch_size = 10
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X,y,theta,batch_size,leaning_rate, max_iter,tolerance)))
leaning_rate = 0.1
max_iter = 1000
tolerance = 1e-04
batch_size = 10
batch_size_online = 1
random_state = 102
ncores = 3
# Gradient sequentiel
print(system.time(model_batch_seq <- dg_batch_seq(X1,y,theta,leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X,y,theta,batch_size,leaning_rate, max_iter,tolerance)))
# Gradient sequentiel
print(system.time(model_batch_seq <- dg_batch_seq(X1,y,theta,leaning_rate, max_iter,tolerance)))
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
# Gradient sequentiel
print(system.time(model_batch_seq <- dg_batch_seq(X1,y,theta,leaning_rate, max_iter,tolerance)))
# Gradient sequentiel
print(system.time(model_batch_seq <- dg_batch_seq(as.matrix(X1),y,theta,leaning_rate, max_iter,tolerance)))
# Gradient sequentiel
print(system.time(model_batch_seq <- dg_batch_seq(X1,y,theta,leaning_rate, max_iter,tolerance)))
library(dgrGlm)
# Gradient sequentiel
print(system.time(model_batch_seq <- dg_batch_seq(X1,y,theta,leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X,y,theta,batch_size,leaning_rate, max_iter,tolerance)))
# Gradient sequentiel
print(system.time(model_batch_seq <- dg_batch_seq(X1,y,theta,leaning_rate, max_iter,tolerance)))
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
# Gradient sequentiel
print(system.time(model_batch_seq <- dg_batch_seq(X1,y,theta,leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X,y,theta,batch_size,leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X, y, theta, batch_size, random_state, leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_seq <- dg_batch_minibatch_online_seq(X,y,theta,batch_size_online,random_state,leaning_rate, max_iter,tolerance)))
str(X)
print(system.time(model_mini_online_batch_seq <- dg_batch_minibatch_online_seq(X,y,theta,batch_size_online,random_state,leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_seq <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size,leaning_rate, max_iter,tolerance)))
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_seq <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size,leaning_rate, max_iter,tolerance)))
leaning_rate = 0.1
max_iter = 1000
tolerance = 1e-04
batch_size = 10
batch_size_online = 1
random_state = 102
ncores = 3
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X, y, theta, batch_size, random_state, leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X, y, theta, batch_size, random_state, leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X, y, theta, batch_size, random_state, leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_seq <- dg_batch_minibatch_online_seq(X,y,theta,batch_size_online,random_state,leaning_rate, max_iter,tolerance)))
# Gradient parallél
print(system.time(model_batch_seq <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_seq <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size,leaning_rate, max_iter,tolerance)))
leaning_rate = 0.1
max_iter = 1000
tolerance = 1e-04
batch_size = 10
batch_size_online = 1
random_state = 102
ncores = 3
print(system.time(model_mini_online_batch_parallel <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size,leaning_rate, max_iter,tolerance)))
library(dgrGlm)
library(dgrGlm)
print(system.time(model_mini_online_batch_parallel <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size,leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_parallel <- dgs_minibatch_online_parallle(X1,y,theta,ncores,10,leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_parallel <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size,leaning_rate, max_iter,tolerance)))
batch_size = 10
print(system.time(model_mini_online_batch_parallel <- dgs_minibatch_online_parallle(X1,y,theta,ncores,batch_size,leaning_rate, max_iter,tolerance)))
bs =10
print(system.time(model_mini_online_batch_parallel <- dgs_minibatch_online_parallle(X1,y,theta,ncores,bs,leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_parallel <- dgs_minibatch_online_parallle(X1,y,theta,ncores,10,leaning_rate, max_iter,tolerance)))
library(dgrGlm)
print(system.time(model_mini_online_batch_parallel <- dgs_minibatch_online_parallle(X1,y,theta,ncores,10,leaning_rate, max_iter,tolerance)))
set.seed(100)
n <-1000
p <- 10
set.seed(100)
n <-1000
p <- 10
theta = runif(p+1) # or theta = runif(7)
X <- cbind(1,matrix(rnorm(n*p),n,p)) #  6 Variables quantitative
X1 = matrix(rnorm(n*p),n,p)
X1 <- as.data.frame(X1)
X1$biais <- 1
class(X1)
class(theta)
Z <- X %*% theta # combinaison lineare de variable
fprob <- ifelse(Z<0, exp(Z)/(1+exp(Z)),1/(1+exp(-Z))) # Calcul des probas d'affectation
y<- rbinom(n,1,fprob)
data = as.data.frame(cbind(y,X1))
leaning_rate = 0.1
max_iter = 1000
tolerance = 1e-04
batch_size = 10
batch_size_online = 1
random_state = 102
ncores = 3
# Gradient sequentiel
print(system.time(model_batch_seq <- dg_batch_seq(X1,y,theta,leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X, y, theta, batch_size, random_state, leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_seq <- dg_batch_minibatch_online_seq(X,y,theta,batch_size_online,random_state,leaning_rate, max_iter,tolerance)))
# Gradient parallél
print(system.time(model_batch_parallel <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
print(system.time(model_mini_online_batch_parallel <- dgs_minibatch_online_parallle(X1,y,theta,ncores,10,leaning_rate, max_iter,tolerance)))
xi=1:model_batch_seq$nbIter
yi=model_batch_seq$history_cost
plot(xi, yi, type="l")
xi=1:model_mini_batch_seq$nb_iter_for
yi=model_mini_batch_seq$history_cost
plot(xi, yi, type="l")
xi=1:model_mini_online_batch_seq$nb_iter_for
yi=model_mini_online_batch_seq$history_cost
plot(xi, yi, type="l")
seq.coef_batch = model_mini_online_batch_seq$theta_final
seq.coef_batch = model_mini_online_batch_seq$theta_final
seq.coef_mini_batch = model_mini_online_batch_parallel$theta_final
seq.coef_online_batch = dg_batch_minibatch_online_seq$theta_final
parbatch.coef_batch_batch = dgsrow_batch_parallele$theta_final
parbatch.coef_mini_batch = dgs_minibatch_online_parallle2$theta_final
seq.coef_batch = model_mini_online_batch_seq$theta_final
seq.coef_mini_batch = model_mini_online_batch_parallel$theta_final
seq.coef_online_batch = dg_batch_minibatch_online_seq$theta_final
parbatch.coef_batch_batch = dgsrow_batch_parallele$theta_final
parbatch.coef_mini_batch = dgs_minibatch_online_parallle$theta_final
seq.coef_batch = dg_batch_seq$theta_final
seq.coef_mini_batch = model_mini_online_batch_parallel$theta
seq.coef_online_batch = dg_batch_minibatch_online_seq$theta
parbatch.coef_batch_batch = dgsrow_batch_parallele$theta_final
parbatch.coef_mini_batch = dgs_minibatch_online_parallle$theta_final
seq.coef_batch = dg_batch_seq$theta_final
seq.coef_batch = dg_batch_seq$instance$theta_final
seq.coef_batch = model_batch_seq$theta_final
seq.coef_batch = model_batch_seq$theta_final
seq.coef_mini_batch = model_mini_batch_seq$theta
seq.coef_online_batch = model_mini_online_batch_seq$theta
parbatch.coef_batch_batch = model_batch_parallel$theta_final
parbatch.coef_mini_batch = model_mini_online_batch_parallel$theta_final
# Newton Raphson BFGS
newton.coef <- optim(theta, log_loss, y=y, X=X1, method = "BFGS")$par
# Newton Raphson BFGS
newton.coef <- optim(theta, logLoss, y=y, X=X1, method = "BFGS")$par
# Newton Raphson BFGS
newton.coef <- optim(theta, logLoss, y=y, X=as.matrix(X1), method = "BFGS")$par
# Comparaison des coefs
cbind(seq.coef_batch=seq.coef_batch, seq.coef_mini_batch =seq.coef_mini_batch , seq.coef_online_batch=seq.coef_online_batch,
parbatch.coef_batch_batch = parbatch.coef_batch_batch, parbatch.coef_mini_batch=parbatch.coef_mini_batch, BFGS=newton.coef)
Z = X %*% newton.coef
prob_pred <- 1/(1+exp(-Z))
y_pred <- ifelse(prob_pred2>0.5,1,0)
coef_determination(y=y,ypred = y_pred)
Z = X %*% newton.coef
prob_pred <- 1/(1+exp(-Z))
y_pred <- ifelse(prob_pred2>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
Z = X %*% newton.coef
prob_pred <- 1/(1+exp(-Z))
y_pred <- ifelse(prob_pred2>0.5,1,0)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
Z = X %*% seq.coef_batch
prob_pred <- 1/(1+exp(-Z))
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
Z = X %*% seq.coef_online_batch
prob_pred <- 1/(1+exp(-Z))
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
Z = X %*% seq.seq.coef_mini_batch
prob_pred <- 1/(1+exp(-Z))
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
Z = X %*% seq.seq.coef_mini_batch
prob_pred <- 1/(1+exp(-Z))
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
Z = X %*% seq.coef_mini_batch
prob_pred <- 1/(1+exp(-Z))
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
Z = X %*% parbatch.coef_batch_batch
prob_pred <- 1/(1+exp(-Z))
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
Z = X %*% parbatch.coef_batch_batch
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
Z = X %*% parbatch.coef_mini_batch
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
Z = X %*% seq.coef_online_batch
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
Z = X %*% seq.coef_mini_batch
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
Z = X %*% newton.coef
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
set.seed(100)
n <-100
p <- 10
theta = runif(p+1) # or theta = runif(7)
X <- cbind(1,matrix(rnorm(n*p),n,p)) #  6 Variables quantitative
X1 = matrix(rnorm(n*p),n,p)
X1 <- as.data.frame(X1)
X1$biais <- 1
class(X1)
class(theta)
Z <- X %*% theta # combinaison lineare de variable
fprob <- ifelse(Z<0, exp(Z)/(1+exp(Z)),1/(1+exp(-Z))) # Calcul des probas d'affectation
y<- rbinom(n,1,fprob)
data = as.data.frame(cbind(y,X1))
leaning_rate = 0.1
max_iter = 1000
tolerance = 1e-04
batch_size = 10
batch_size_online = 1
random_state = 102
ncores = 3
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X, y, theta, 10, random_state, leaning_rate, max_iter,tolerance)))
xi=1:model_mini_batch_seq$nb_iter_for
yi=model_mini_batch_seq$history_cost
plot(xi, yi, type="l")
seq.coef_mini_batch = model_mini_batch_seq$theta
Z = X %*% seq.coef_mini_batch
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
library(dgrGlm)
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X, y, theta, 10, random_state, leaning_rate, max_iter,tolerance)))
xi=1:model_mini_batch_seq$nb_iter_for
yi=model_mini_batch_seq$history_cost
plot(xi, yi, type="l")
seq.coef_mini_batch = model_mini_batch_seq$theta
Z = X %*% seq.coef_mini_batch
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X, y, theta, batch_size=10, random_state=102, leaning_rate=0.01, max_iter=100,tolerance=1e-06)))
xi=1:model_mini_batch_seq$nb_iter_for
yi=model_mini_batch_seq$history_cost
plot(xi, yi, type="l")
seq.coef_mini_batch = model_mini_batch_seq$theta
Z = X %*% seq.coef_mini_batch
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X, y, theta, batch_size=10, random_state=102, leaning_rate=0.01, max_iter=1000,tolerance=1e-06)))
xi=1:model_mini_batch_seq$nb_iter_for
yi=model_mini_batch_seq$history_cost
plot(xi, yi, type="l")
seq.coef_mini_batch = model_mini_batch_seq$theta
Z = X %*% seq.coef_mini_batch
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
print(system.time(model_mini_batch_seq <- dg_batch_minibatch_online_seq(X, y, theta, batch_size=10, random_state=102, leaning_rate=0.05, max_iter=1000,tolerance=1e-06)))
xi=1:model_mini_batch_seq$nb_iter_for
yi=model_mini_batch_seq$history_cost
plot(xi, yi, type="l")
seq.coef_mini_batch = model_mini_batch_seq$theta
Z = X %*% seq.coef_mini_batch
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
print(system.time(model_batch_seq <- dg_batch_seq(X1,y,theta,leaning_rate=0.1, max_iter=1000,tolerance=1e-06)))
xi=1:model_batch_seq$nbIter
yi=model_mini_batch_seq$history_cost
plot(xi, yi, type="l")
print(system.time(model_batch_seq <- dg_batch_seq(X1,y,theta,leaning_rate=0.1, max_iter=1000,tolerance=1e-06)))
xi=1:model_batch_seq$nbIter
yi=model_batch_seq$history_cost
plot(xi, yi, type="l")
seq.coef_batch = model_batch_seq$theta_final
Z = X %*% seq.coef_batch
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
# Newton Raphson BFGS
newton.coef <- optim(theta, logLoss, y=y, X=as.matrix(X1), method = "BFGS")$par
Z = X %*% seq.newton.coef
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
print(system.time(model_mini_online_batch_seq <- dg_batch_minibatch_online_seq(X, y, theta, batch_size=1, random_state=102, leaning_rate=0.05, max_iter=1000,tolerance=1e-06)))
xi=1:model_mini_online_batch_seq$nb_iter_for
yi=model_mini_online_batch_seq$history_cost
plot(xi, yi, type="l")
seq.coef_online_batch = model_mini_online_batch_seq$theta
seq.coef_online_batch = model_mini_online_batch_seq$theta
Z = X %*% seq.coef_online_batch
prob_pred <- sigmoid(Z)
y_pred <- ifelse(prob_pred>0.5,1,0)
metric_R2(y=y,ypred = y_pred)
#Teste du fit
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="sequentiel",leaning_rate, max_iter,tolerance)))
# Gradient parallél
print(system.time(model_batch_parallel <- dgsrow_batch_parallele(X1, y, theta, ncores, leaning_rate, max_iter,tolerance)))
model_batch_seq
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="parallel",leaning_rate, max_iter,tolerance)))
seq.coef_batch = model_batch_seq$theta_final
seq.coef_mini_batch = model_mini_batch_seq$theta
model_batch_seq
model_batch_seq
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="parallel",batch_size = 10,leaning_rate, max_iter,tolerance)))
model_batch_seq
print(system.time(model_online_parallel <- dgrglm.fit(y~., data = data, ncores, mode_compute="parallel",batch_size = 1,leaning_rate=0.05, max_iter=1000,tolerance=1e-06)))
model_online_parallel
set.seed(103)
n <-100
p <- 10
theta = runif(p+1) # or theta = runif(7)
X <- cbind(1,matrix(rnorm(n*p),n,p)) #  6 Variables quantitative
X1 = matrix(rnorm(n*p),n,p)
X1 <- as.data.frame(X1)
X1$biais <- 1
class(X1)
class(theta)
Z <- X %*% theta # combinaison lineare de variable
fprob <- ifelse(Z<0, exp(Z)/(1+exp(Z)),1/(1+exp(-Z))) # Calcul des probas d'affectation
y<- rbinom(n,1,fprob)
data = as.data.frame(cbind(y,X1))
set.seed(103)
n <-500
p <- 10
theta = runif(p+1) # or theta = runif(7)
X <- cbind(1,matrix(rnorm(n*p),n,p)) #  6 Variables quantitative
X1 = matrix(rnorm(n*p),n,p)
X1 <- as.data.frame(X1)
X1$biais <- 1
class(X1)
class(theta)
Z <- X %*% theta # combinaison lineare de variable
fprob <- ifelse(Z<0, exp(Z)/(1+exp(Z)),1/(1+exp(-Z))) # Calcul des probas d'affectation
y<- rbinom(n,1,fprob)
data = as.data.frame(cbind(y,X1))
#Teste du fit
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="sequentiel",leaning_rate=0.05, max_iter=1000,tolerance=1e-06)))
model_batch_seq
#Teste du fit
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="sequentiel",leaning_rate=0.05, max_iter=6000,tolerance=1e-06)))
print(system.time(model_batch_parallel <- dgrglm.fit(y~., data = data, ncores, mode_compute="parallel",leaning_rate=0.05, max_iter=1000,tolerance=1e-06)))
model_batch_seq
#Teste du fit
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="sequentiel",leaning_rate=0.05, max_iter=1000,tolerance=1e-06)))
library(xlsx)
data <- read.xlsx(file="~/Desktop/Lyon2/SISE/AtelierMachLeraning/Reg Logistique_opt_hyp/ionosphere.xlsx",sheetIndex=1,header=T)
data = data[,-33]
data
View(data)
#Teste du fit
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="sequentiel",leaning_rate=0.05, max_iter=1000,tolerance=1e-06)))
model_batch_seq
#Teste du fit
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="sequentiel",leaning_rate=0.05, max_iter=1000,tolerance=1e-06)))
model_batch_seq
#Teste du fit
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="sequentiel",leaning_rate=0.01, max_iter=2000,tolerance=1e-06)))
print(system.time(model_batch_parallel <- dgrglm.fit(y~., data = data, ncores, mode_compute="parallel",leaning_rate=0.05, max_iter=1000,tolerance=1e-06)))
model_batch_seq
model_batch_seq
#Teste du fit
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="sequentiel",leaning_rate=0.01, max_iter=2000,tolerance=1e-06)))
model_batch_seq
#Teste du fit
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="sequentiel",leaning_rate=0.1, max_iter=2000,tolerance=1e-06)))
model_batch_seq
#Teste du fit
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="sequentiel",leaning_rate=0.12, max_iter=2000,tolerance=1e-06)))
model_batch_seq
#Teste du fit
print(system.time(model_batch_seq <- dgrglm.fit(y~., data = data, ncores, mode_compute="sequentiel",leaning_rate=0.1, max_iter=2000,tolerance=1e-06)))
model_batch_seq
print(system.time(model_batch_parallel <- dgrglm.fit(y~., data = data, ncores, mode_compute="parallel",leaning_rate=0.1, max_iter=1000,tolerance=1e-06)))
model_batch_parallel
print(system.time(model_minibatch_parallel <- dgrglm.fit(y~., data = data, ncores, mode_compute="parallel",batch_size = 10,leaning_rate=0.1, max_iter=1000,tolerance=1e-06)))
model_minibatch_parallel
print(system.time(model_online_parallel <- dgrglm.fit(y~., data = data, ncores, mode_compute="parallel",batch_size = 1,leaning_rate=0.1, max_iter=1000,tolerance=1e-06)))
model_online_parallel
model_online_parallel
